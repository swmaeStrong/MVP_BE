# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행#
on:
  push:
    branches: [ "main", "env_setting" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)#
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: recursive
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상#
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-     

      # shell: bash
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to develop | env_setting##
      - name: Docker build & push to dev
        if: contains(github.ref, 'dev') || contains(github.ref, 'env_setting')
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/swmstrong:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/swmstrong:latest

      # deploy to develop | env_setting
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'dev') || contains(github.ref, 'env_setting')
        with:
          host: ${{ secrets.HOST_DEV }} ## EC2 퍼블릭 IPv4 DNS
          username: ubuntu #ubuntu
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          envs: MYSQL_URL,MYSQL_USERNAME,MYSQL_PASSWORD,MONGO_URL,DOCKER_USERNAME
          script: |
            #       Stop and remove existing container
            sudo docker stop swmstrong || true
            sudo docker rm swmstrong || true
            sudo docker image rm $DOCKER_USERNAME/swmstrong || true

          # Pull the latest image
            sudo docker pull $DOCKER_USERNAME/swmstrong || exit 1
          
          
            # 3. .env 파일 생성
            cat <<EOF > .env
            MYSQL_URL=$MYSQL_URL
            MYSQL_USERNAME=$MYSQL_USERNAME
            MYSQL_PASSWORD=$MYSQL_PASSWORD
            MONGO_URL=$MONGO_URL
            DOCKER_USERNAME=$DOCKER_USERNAME
            EOF


            # Run the new container
              docker-compose --env-file .env up -d

            # Clean up unused images
              docker image prune -f
            
            # Check logs
              sudo docker logs swmstrong
